# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Stage:
    Type: String
    Description: Stage to deploy resources to
    Default: alpha
    AllowedValues:
      - local
      - alpha
      - staging
      - production
  TableName:
    Type: String
    Default: fraggerz-api-2-alpha # Ensure the suffix matches stage

Conditions:
  IsProduction: !Equals [ !Ref Stage, production ]

Globals:
  Api:
    OpenApiVersion: 3.0.1 # to avoid default stage creation
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 180
    Tracing: Active
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref TableName
        NODE_ENV: !Ref Stage
    Tags:
      project: my-project
      environment: !Ref Stage
    Layers:
      - !Ref DependenciesLayer
      - !Ref CoreLayer
    AutoPublishAlias: !Ref Stage

Resources:

  FraggerZApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "fraggerz-api-${Stage}"
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
  
  UserAdd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-add'
      CodeUri: src/lambdas/user/dist/.
      Handler: add.handler
      # DeploymentPreference:
      #   Type: !If [IsProduction, CustomLambdaLinear25PercentEvery1Minute, AllAtOnce]
      #   Hooks:
      #     PreTraffic: !Ref RegisterUserPreTraffic
      # Alarms:
      #   - !Ref RegisterUserAliasErrorMetricGreaterThanZeroAlarm
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user
            Method: post
            RestApiId:
              Ref: FraggerZApi

  UserGetList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-getList'
      CodeUri: src/lambdas/user/dist/.
      Handler: getList.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: FraggerZApi

  UserGetOne:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-getOne'
      CodeUri: src/lambdas/user/dist/.
      Handler: getOne.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: get
            RestApiId:
              Ref: FraggerZApi

  UserUpdate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-update'
      CodeUri: src/lambdas/user/dist/.
      Handler: update.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: put
            RestApiId:
              Ref: FraggerZApi

  UserGetStats:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-getStats'
      CodeUri: src/lambdas/user/dist/.
      Handler: getStats.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}/stats
            Method: get
            RestApiId:
              Ref: FraggerZApi
            RequestParameters:
              - method.request.querystring.ladderId:
                  Required: true
              - method.request.querystring.season:
                  Required: true
              - method.request.querystring.gameCode:
                  Required: true

  UserGetGameProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-getGameProfile'
      CodeUri: src/lambdas/user/dist/.
      Handler: getGameProfile.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}/gameprofile
            Method: get
            RestApiId:
              Ref: FraggerZApi
            RequestParameters:
              - method.request.querystring.gameCode:
                  Required: true

  UserUpdateGameProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-updateGameProfile'
      CodeUri: src/lambdas/user/dist/.
      Handler: updateGameProfile.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}/gameprofile
            Method: put
            RestApiId:
              Ref: FraggerZApi

  UserGetLadder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-getLadder'
      CodeUri: src/lambdas/user/dist/.
      Handler: getLadder.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}/ladder
            Method: get
            RestApiId:
              Ref: FraggerZApi
            RequestParameters:
              - method.request.querystring.gameCode:
                  Required: true
              - method.request.querystring.ladderName:
                  Required: true
              - method.request.querystring.seasonId:
                  Required: true

  UserUpdateLadder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-user-updateLadder'
      CodeUri: src/lambdas/user/dist/.
      Handler: updateLadder.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{id}/ladder
            Method: put
            RestApiId:
              Ref: FraggerZApi

  LadderAdd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-ladder-add'
      CodeUri: src/lambdas/ladder/dist/.
      Handler: add.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ladder
            Method: post
            RestApiId:
              Ref: FraggerZApi

  LadderGetLeaderboard:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-ladder-getLeaderboard'
      CodeUri: src/lambdas/ladder/dist/.
      Handler: getLeaderboard.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /ladder/{id}/leaderboard
            Method: get
            RestApiId:
              Ref: FraggerZApi

  MatchAdd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-match-add'
      CodeUri: src/lambdas/match/dist/.
      Handler: add.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /match
            Method: post
            RestApiId:
              Ref: FraggerZApi

  MatchGetOne:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-match-getOne'
      CodeUri: src/lambdas/match/dist/.
      Handler: getOne.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /match/{id}
            Method: get
            RestApiId:
              Ref: FraggerZApi

  MatchUpdate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-match-update'
      CodeUri: src/lambdas/match/dist/.
      Handler: update.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /match/{id}
            Method: put
            RestApiId:
              Ref: FraggerZApi

  MatchReport:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-match-report'
      CodeUri: src/lambdas/match/dist/.
      Handler: report.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /match/{id}/report
            Method: put
            RestApiId:
              Ref: FraggerZApi

  GameAdd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-game-add'
      CodeUri: src/lambdas/game/dist/.
      Handler: add.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /game
            Method: post
            RestApiId:
              Ref: FraggerZApi

  GameUpdate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-game-update'
      CodeUri: src/lambdas/game/dist/.
      Handler: update.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /game
            Method: put
            RestApiId:
              Ref: FraggerZApi

  GameGetOne:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-game-getOne'
      CodeUri: src/lambdas/game/dist/.
      Handler: getOne.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /game/{gameCode}
            Method: get
            RestApiId:
              Ref: FraggerZApi
        
  FraggerZTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      BillingMode: PAY_PER_REQUEST
      Tags:
        project: fraggerz-api
        environment: !Ref Stage

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DependenciesLayer
      ContentUri: src/layers/dependencies/.
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: nodejs14.x
        
  CoreLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CoreLayer
      ContentUri: src/layers/core/dist/src/.
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: nodejs14.x

  # CognitoUserPool:
  #   Type: AWS::Cognito::UserPool
  #   Properties:
  #     UserPoolName: !Sub "${Stage}-fraggerz-api-user-pool"
  #     Policies:
  #       PasswordPolicy:
  #         MinimumLength: 6
  #         RequireLowercase: false
  #         RequireNumbers: true
  #         RequireSymbols: false
  #         RequireUppercase: false
  #     UsernameAttributes:
  #       - email
  #     Schema:
  #       - AttributeDataType: String
  #         Name: email
  #         Required: false

  # UserPoolClient:
  #   Type: "AWS::Cognito::UserPoolClient"
  #   Properties:
  #     UserPoolId: !Ref CognitoUserPool
  #     AllowedOAuthFlowsUserPoolClient: true
  #     AllowedOAuthFlows:
  #       - implicit
  #     AllowedOAuthScopes:
  #       - email
  #       - openid
  #     CallbackURLs:
  #       - https://aws.amazon.com/
  #     SupportedIdentityProviders:
  #       - COGNITO
  #     ExplicitAuthFlows:
  #       - ALLOW_REFRESH_TOKEN_AUTH 
  #       - !If
  #         - IsProduction
  #         - !Ref 'AWS::NoValue'
  #         - ALLOW_USER_PASSWORD_AUTH

  # UserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties: 
  #     Domain: !Sub "fraggerz-api-${Stage}-${AWS::AccountId}"
  #     UserPoolId: !Ref CognitoUserPool

  # RegisterUserPreTraffic:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub 'CodeDeployHook_${Stage}-fraggerz-create-pre-traffic-check'
  #     CodeUri: ./src/lambdas/user-pre-traffic/dist/
  #     Handler: add.handler
  #     Environment:
  #       Variables:
  #         TABLE: !Ref TableName
  #         FN_NEW_VERSION: !Ref RegisterUser.Version
  #     Tags:
  #       project: fraggerz-api
  #       environment: !Ref Stage
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref TableName
  #       - Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #             - codedeploy:PutLifecycleEventHookExecutionStatus
  #           Resource:
  #             !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
  #       - Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #             - lambda:InvokeFunction
  #           Resource: !Ref RegisterUser.Version

  # RegisterUserAliasErrorMetricGreaterThanZeroAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: Lambda Function Error > 0
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #       - Name: Resource
  #         Value: !Sub '${RegisterUser}:${Stage}'
  #       - Name: FunctionName
  #         Value: !Ref RegisterUser
  #     EvaluationPeriods: 2
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 0

Outputs:
  ApiEndpoint:
    Description: "API endpoint"
    Value: !Sub "https://${FraggerZApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  UserPoolId:
    Description: "User Pool Id"
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref UserPoolClient
  FraggerZTable:
    Description: "DynamoDB table where we will store FraggerZ information"
    Value: !Ref TableName
