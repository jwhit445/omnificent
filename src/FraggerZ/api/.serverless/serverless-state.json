{
  "service": {
    "service": "fraggerz-api-2",
    "serviceObject": {
      "name": "fraggerz-api-2"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-2",
      "stage": "alpha",
      "environment": {
        "NODE_ENV": "dev",
        "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-2:*:table/fraggerz-api-2-alpha",
            "arn:aws:dynamodb:us-east-2:*:table/fraggerz-api-2-alpha/index/*"
          ]
        }
      ],
      "apiGateway": {
        "shouldStartNameWithService": true
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "MigrateTableToNewSchemaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-migrateTableToNewSchema"
            }
          },
          "AddMigrateAttributeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-addMigrateAttribute"
            }
          },
          "AdminResetAllMmrLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-adminResetAllMmr"
            }
          },
          "AdminRedoAllMmrLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-adminRedoAllMmr"
            }
          },
          "MatchRegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-matchRegister"
            }
          },
          "MatchgetOneLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-matchgetOne"
            }
          },
          "MatchUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-matchUpdate"
            }
          },
          "MatchReportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-matchReport"
            }
          },
          "MatchGetByMatchNumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-matchGetByMatchNum"
            }
          },
          "ScrimCreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-scrimCreate"
            }
          },
          "ScrimGetByMessageIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-scrimGetByMessageId"
            }
          },
          "ScrimGetByTeamsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-scrimGetByTeams"
            }
          },
          "ScrimDeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-scrimDelete"
            }
          },
          "TeamRegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-teamRegister"
            }
          },
          "TeamGetOneLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-teamGetOne"
            }
          },
          "TeamUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-teamUpdate"
            }
          },
          "TeamGetStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-teamGetStats"
            }
          },
          "UserRegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userRegister"
            }
          },
          "UserGetOneLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userGetOne"
            }
          },
          "UserUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userUpdate"
            }
          },
          "UserGetStatsWithMatchesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userGetStatsWithMatches"
            }
          },
          "UserGetStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userGetStats"
            }
          },
          "UserGetAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userGetAll"
            }
          },
          "UserGetLeaderboardLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/fraggerz-api-2-alpha-userGetLeaderboard"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "fraggerz-api-2",
                        "alpha",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/fraggerz-api-2-alpha*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/fraggerz-api-2-alpha*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "fraggerz-api-2",
                    "alpha",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "MigrateTableToNewSchemaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/admin/handler.migrateTableStream",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-migrateTableToNewSchema",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MigrateTableToNewSchemaLogGroup"
            ]
          },
          "AddMigrateAttributeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/admin/handler.addMigrateAttribute",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-addMigrateAttribute",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddMigrateAttributeLogGroup"
            ]
          },
          "AdminResetAllMmrLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/admin/handler.resetAllMmr",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-adminResetAllMmr",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminResetAllMmrLogGroup"
            ]
          },
          "AdminRedoAllMmrLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/admin/handler.redoAllMmr",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-adminRedoAllMmr",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminRedoAllMmrLogGroup"
            ]
          },
          "MatchRegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/match/handler.register",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-matchRegister",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MatchRegisterLogGroup"
            ]
          },
          "MatchgetOneLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/match/handler.getOne",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-matchgetOne",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MatchgetOneLogGroup"
            ]
          },
          "MatchUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/match/handler.update",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-matchUpdate",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MatchUpdateLogGroup"
            ]
          },
          "MatchReportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/match/handler.report",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-matchReport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MatchReportLogGroup"
            ]
          },
          "MatchGetByMatchNumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/match/handler.getByMatchNum",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-matchGetByMatchNum",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MatchGetByMatchNumLogGroup"
            ]
          },
          "ScrimCreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "scrim/handler.create",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-scrimCreate",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrimCreateLogGroup"
            ]
          },
          "ScrimGetByMessageIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/scrim/handler.getByMessageId",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-scrimGetByMessageId",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrimGetByMessageIdLogGroup"
            ]
          },
          "ScrimGetByTeamsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/scrim/handler.getByTeams",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-scrimGetByTeams",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrimGetByTeamsLogGroup"
            ]
          },
          "ScrimDeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/scrim/handler.deleteScrim",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-scrimDelete",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScrimDeleteLogGroup"
            ]
          },
          "TeamRegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/team/handler.register",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-teamRegister",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TeamRegisterLogGroup"
            ]
          },
          "TeamGetOneLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/team/handler.getOne",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-teamGetOne",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TeamGetOneLogGroup"
            ]
          },
          "TeamUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/team/handler.update",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-teamUpdate",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TeamUpdateLogGroup"
            ]
          },
          "TeamGetStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/team/handler.getStats",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-teamGetStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TeamGetStatsLogGroup"
            ]
          },
          "UserRegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.register",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userRegister",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserRegisterLogGroup"
            ]
          },
          "UserGetOneLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.getOne",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userGetOne",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserGetOneLogGroup"
            ]
          },
          "UserUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.update",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userUpdate",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserUpdateLogGroup"
            ]
          },
          "UserGetStatsWithMatchesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.getStatsWithMatches",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userGetStatsWithMatches",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserGetStatsWithMatchesLogGroup"
            ]
          },
          "UserGetStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.getStats",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userGetStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserGetStatsLogGroup"
            ]
          },
          "UserGetAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.getAll",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userGetAll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserGetAllLogGroup"
            ]
          },
          "UserGetLeaderboardLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z/fraggerz-api-2.zip"
              },
              "Handler": "dist/user/handler.getLeaderboard",
              "Runtime": "nodejs12.x",
              "FunctionName": "fraggerz-api-2-alpha-userGetLeaderboard",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "dev",
                  "DYNAMODB_TABLE": "fraggerz-api-2-alpha"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserGetLeaderboardLogGroup"
            ]
          },
          "MigrateTableToNewSchemaLambdaVersion4cctn3aH7rMnsjtc5FpM9j0Z46PMkcHxbRKeR8aM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MigrateTableToNewSchemaLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "AdminResetAllMmrLambdaVersionHYo48k4w3VcmCpx0HB3WxpRridPNfZ8pG3MXgSQrc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminResetAllMmrLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "AddMigrateAttributeLambdaVersionEms8gn4vWasKUWuzWIHfOOmtianrGOeoOfHry7rLblM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddMigrateAttributeLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "MatchRegisterLambdaVersion4iHWgP4iA6kGuVn80AdG7bevlkJ8yFb0XE4OSpMx9t8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MatchRegisterLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "AdminRedoAllMmrLambdaVersionuIMN4fRsIan65vqcydg5fzJPHV1dcEZYGib6748bQI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminRedoAllMmrLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "MatchgetOneLambdaVersionU9JuECUUp0IpTWYir0Cy6TN0bGskrb2WpnssZ3HANw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MatchgetOneLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "MatchUpdateLambdaVersionMLu0NkXb7xQLqPgKd0xegrLgOYULNBjneb5zgn7zaUA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MatchUpdateLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "MatchReportLambdaVersioncTU0FNUHi6d4cYGUgUjwRyM9oFl94ovigNg00VE8g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MatchReportLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "MatchGetByMatchNumLambdaVersionuETtvudrOr3AaStVcyHvKzDJTvNtdtoQsNnfvg04k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MatchGetByMatchNumLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "ScrimCreateLambdaVersionXtDCwa5FOvT0tKJBQFpJih9vWW5gVSDhTvcF0GH7A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrimCreateLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "ScrimGetByMessageIdLambdaVersionkEsTHlShB9Kv7mY8V9SMWYjRcugqlgMI9JNK0DSuU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrimGetByMessageIdLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "ScrimGetByTeamsLambdaVersionD6S1J0qz5m96jTBxZuZQCqsAK2Ja90hG0teKELwVSw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrimGetByTeamsLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "ScrimDeleteLambdaVersionXMSCNHYQMxefBhI2qOXDsuFOSBiO0mSPqDvsUYps": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScrimDeleteLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "TeamRegisterLambdaVersion6yY8rG029pRkfh7l49bgXvmTp3J4BH84VECwcG8nGc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TeamRegisterLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "TeamGetOneLambdaVersionpRSlcgYX4GWjccCkJ3zM64sBbo97i5vOUCR3Fprk9i0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TeamGetOneLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "TeamGetStatsLambdaVersion2bOrZr0CYgN7GhJkZdQlnfjmI60uDrV52rjNd49zM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TeamGetStatsLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "TeamUpdateLambdaVersionOBuovreGTvfY12p1wbfGsukdD3Tgz6P320SMU8bEU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TeamUpdateLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserRegisterLambdaVersionA5NARsVybrWSq4ieySNbFaFIsRqiEoX8eTRjIPd4Qtc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserRegisterLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserGetOneLambdaVersion0tyDZhfUVn2gZX9UGcYBoUOOG0d7PpOyybJuQDUqQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserGetOneLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserUpdateLambdaVersiongYLhmKNI3eudtQe4j0c6HI0PdMkJWa9nfFYNto6BcGY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserUpdateLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserGetStatsWithMatchesLambdaVersionJDjjVHudKlIS0v1obWxPlRNg89TqSaItiSDKNuIZI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserGetStatsWithMatchesLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserGetStatsLambdaVersionAKvHjunJH0Ea94XYXXhkhDgPQhtA12dD6bI7CPde70": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserGetStatsLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserGetAllLambdaVersionfJrUhslgdvprEhxRgElpp2BM8NsjBLwKpVQwwPYKV0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserGetAllLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "UserGetLeaderboardLambdaVersionWNUTS9cyOjDzkk15qXSQ4YrnZAKe0rPXQZJCVSoWTY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserGetLeaderboardLambdaFunction"
              },
              "CodeSha256": "QYRR6V0021dXgUu2zHJ9cnwMEtuFiLiXerVheRxXhZ8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "fraggerz-api-2-alpha",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAdmin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "admin",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminResetmmr": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "resetmmr",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminRedommr": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "redommr",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "match",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatch"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchIdVarReport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatchIdVar"
              },
              "PathPart": "report",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrim": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "scrim",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScrimIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScrim"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeam": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "team",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeamIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTeam"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeamIdVarStats": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTeamIdVar"
              },
              "PathPart": "stats",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVarStatswithmatches": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "PathPart": "statswithmatches",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVarStats": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "PathPart": "stats",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserLeaderboard": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "leaderboard",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminResetmmrPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminResetmmr"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminResetAllMmrLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAdminRedommrPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminRedommr"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminRedoAllMmrLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMatchPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MatchRegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMatchIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MatchgetOneLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMatchIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MatchUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMatchIdVarReportPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchIdVarReport"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MatchReportLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMatchGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.matchNumber": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatch"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MatchGetByMatchNumLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodScrimPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrim"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrimCreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodScrimGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.messageId": true,
                "method.request.querystring.team1": true,
                "method.request.querystring.team2": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrim"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrimGetByTeamsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodScrimIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScrimIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScrimDeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTeamPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeam"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TeamRegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTeamIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TeamGetOneLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTeamIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TeamUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTeamIdVarStatsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamIdVarStats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TeamGetStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserRegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserGetOneLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserIdVarStatswithmatchesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVarStatswithmatches"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserGetStatsWithMatchesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserIdVarStatsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVarStats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserGetStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserGetAllLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserLeaderboardGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserLeaderboard"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserGetLeaderboardLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1615098100807": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "alpha"
            },
            "DependsOn": [
              "ApiGatewayMethodAdminResetmmrPost",
              "ApiGatewayMethodAdminRedommrPost",
              "ApiGatewayMethodMatchPost",
              "ApiGatewayMethodMatchIdVarGet",
              "ApiGatewayMethodMatchIdVarPut",
              "ApiGatewayMethodMatchIdVarReportPut",
              "ApiGatewayMethodMatchGet",
              "ApiGatewayMethodScrimPost",
              "ApiGatewayMethodScrimGet",
              "ApiGatewayMethodScrimGet",
              "ApiGatewayMethodScrimIdVarDelete",
              "ApiGatewayMethodTeamPost",
              "ApiGatewayMethodTeamIdVarGet",
              "ApiGatewayMethodTeamIdVarPut",
              "ApiGatewayMethodTeamIdVarStatsGet",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodUserIdVarGet",
              "ApiGatewayMethodUserIdVarPut",
              "ApiGatewayMethodUserIdVarStatswithmatchesGet",
              "ApiGatewayMethodUserIdVarStatsGet",
              "ApiGatewayMethodUserGet",
              "ApiGatewayMethodUserLeaderboardGet"
            ]
          },
          "AdminResetAllMmrLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminResetAllMmrLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminRedoAllMmrLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminRedoAllMmrLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MatchRegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MatchRegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MatchgetOneLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MatchgetOneLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MatchUpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MatchUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MatchReportLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MatchReportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MatchGetByMatchNumLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MatchGetByMatchNumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrimCreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrimCreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrimGetByMessageIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrimGetByMessageIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrimGetByTeamsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrimGetByTeamsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScrimDeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScrimDeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TeamRegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TeamRegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TeamGetOneLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TeamGetOneLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TeamUpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TeamUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TeamGetStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TeamGetStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserRegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserRegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserGetOneLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserGetOneLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserUpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserGetStatsWithMatchesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserGetStatsWithMatchesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserGetStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserGetStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserGetAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserGetAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserGetLeaderboardLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserGetLeaderboardLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FraggerzDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "fraggerz-api-2-alpha"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "MigrateTableToNewSchemaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MigrateTableToNewSchemaLambdaVersion4cctn3aH7rMnsjtc5FpM9j0Z46PMkcHxbRKeR8aM"
            }
          },
          "AdminResetAllMmrLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminResetAllMmrLambdaVersionHYo48k4w3VcmCpx0HB3WxpRridPNfZ8pG3MXgSQrc"
            }
          },
          "AddMigrateAttributeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddMigrateAttributeLambdaVersionEms8gn4vWasKUWuzWIHfOOmtianrGOeoOfHry7rLblM"
            }
          },
          "MatchRegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MatchRegisterLambdaVersion4iHWgP4iA6kGuVn80AdG7bevlkJ8yFb0XE4OSpMx9t8"
            }
          },
          "AdminRedoAllMmrLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminRedoAllMmrLambdaVersionuIMN4fRsIan65vqcydg5fzJPHV1dcEZYGib6748bQI"
            }
          },
          "MatchgetOneLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MatchgetOneLambdaVersionU9JuECUUp0IpTWYir0Cy6TN0bGskrb2WpnssZ3HANw"
            }
          },
          "MatchUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MatchUpdateLambdaVersionMLu0NkXb7xQLqPgKd0xegrLgOYULNBjneb5zgn7zaUA"
            }
          },
          "MatchReportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MatchReportLambdaVersioncTU0FNUHi6d4cYGUgUjwRyM9oFl94ovigNg00VE8g"
            }
          },
          "MatchGetByMatchNumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MatchGetByMatchNumLambdaVersionuETtvudrOr3AaStVcyHvKzDJTvNtdtoQsNnfvg04k"
            }
          },
          "ScrimCreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrimCreateLambdaVersionXtDCwa5FOvT0tKJBQFpJih9vWW5gVSDhTvcF0GH7A"
            }
          },
          "ScrimGetByMessageIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrimGetByMessageIdLambdaVersionkEsTHlShB9Kv7mY8V9SMWYjRcugqlgMI9JNK0DSuU"
            }
          },
          "ScrimGetByTeamsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrimGetByTeamsLambdaVersionD6S1J0qz5m96jTBxZuZQCqsAK2Ja90hG0teKELwVSw"
            }
          },
          "ScrimDeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScrimDeleteLambdaVersionXMSCNHYQMxefBhI2qOXDsuFOSBiO0mSPqDvsUYps"
            }
          },
          "TeamRegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TeamRegisterLambdaVersion6yY8rG029pRkfh7l49bgXvmTp3J4BH84VECwcG8nGc"
            }
          },
          "TeamGetOneLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TeamGetOneLambdaVersionpRSlcgYX4GWjccCkJ3zM64sBbo97i5vOUCR3Fprk9i0"
            }
          },
          "TeamGetStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TeamGetStatsLambdaVersion2bOrZr0CYgN7GhJkZdQlnfjmI60uDrV52rjNd49zM"
            }
          },
          "TeamUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TeamUpdateLambdaVersionOBuovreGTvfY12p1wbfGsukdD3Tgz6P320SMU8bEU"
            }
          },
          "UserRegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserRegisterLambdaVersionA5NARsVybrWSq4ieySNbFaFIsRqiEoX8eTRjIPd4Qtc"
            }
          },
          "UserGetOneLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserGetOneLambdaVersion0tyDZhfUVn2gZX9UGcYBoUOOG0d7PpOyybJuQDUqQ"
            }
          },
          "UserUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserUpdateLambdaVersiongYLhmKNI3eudtQe4j0c6HI0PdMkJWa9nfFYNto6BcGY"
            }
          },
          "UserGetStatsWithMatchesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserGetStatsWithMatchesLambdaVersionJDjjVHudKlIS0v1obWxPlRNg89TqSaItiSDKNuIZI"
            }
          },
          "UserGetStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserGetStatsLambdaVersionAKvHjunJH0Ea94XYXXhkhDgPQhtA12dD6bI7CPde70"
            }
          },
          "UserGetAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserGetAllLambdaVersionfJrUhslgdvprEhxRgElpp2BM8NsjBLwKpVQwwPYKV0"
            }
          },
          "UserGetLeaderboardLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserGetLeaderboardLambdaVersionWNUTS9cyOjDzkk15qXSQ4YrnZAKe0rPXQZJCVSoWTY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/alpha"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "migrateTableToNewSchema": {
        "handler": "dist/admin/handler.migrateTableStream",
        "events": [],
        "name": "fraggerz-api-2-alpha-migrateTableToNewSchema",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MigrateTableToNewSchemaLambdaVersion4cctn3aH7rMnsjtc5FpM9j0Z46PMkcHxbRKeR8aM"
      },
      "addMigrateAttribute": {
        "handler": "dist/admin/handler.addMigrateAttribute",
        "events": [],
        "name": "fraggerz-api-2-alpha-addMigrateAttribute",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddMigrateAttributeLambdaVersionEms8gn4vWasKUWuzWIHfOOmtianrGOeoOfHry7rLblM"
      },
      "adminResetAllMmr": {
        "handler": "dist/admin/handler.resetAllMmr",
        "events": [
          {
            "http": {
              "path": "admin/resetmmr",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-adminResetAllMmr",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AdminResetAllMmrLambdaVersionHYo48k4w3VcmCpx0HB3WxpRridPNfZ8pG3MXgSQrc"
      },
      "adminRedoAllMmr": {
        "handler": "dist/admin/handler.redoAllMmr",
        "events": [
          {
            "http": {
              "path": "admin/redommr",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-adminRedoAllMmr",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AdminRedoAllMmrLambdaVersionuIMN4fRsIan65vqcydg5fzJPHV1dcEZYGib6748bQI"
      },
      "matchRegister": {
        "handler": "dist/match/handler.register",
        "events": [
          {
            "http": {
              "path": "match",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-matchRegister",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MatchRegisterLambdaVersion4iHWgP4iA6kGuVn80AdG7bevlkJ8yFb0XE4OSpMx9t8"
      },
      "matchgetOne": {
        "handler": "dist/match/handler.getOne",
        "events": [
          {
            "http": {
              "path": "match/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-matchgetOne",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MatchgetOneLambdaVersionU9JuECUUp0IpTWYir0Cy6TN0bGskrb2WpnssZ3HANw"
      },
      "matchUpdate": {
        "handler": "dist/match/handler.update",
        "events": [
          {
            "http": {
              "path": "match/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-matchUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MatchUpdateLambdaVersionMLu0NkXb7xQLqPgKd0xegrLgOYULNBjneb5zgn7zaUA"
      },
      "matchReport": {
        "handler": "dist/match/handler.report",
        "events": [
          {
            "http": {
              "path": "match/{id}/report",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-matchReport",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MatchReportLambdaVersioncTU0FNUHi6d4cYGUgUjwRyM9oFl94ovigNg00VE8g"
      },
      "matchGetByMatchNum": {
        "handler": "dist/match/handler.getByMatchNum",
        "events": [
          {
            "http": {
              "path": "match",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.querystring.matchNumber": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-matchGetByMatchNum",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MatchGetByMatchNumLambdaVersionuETtvudrOr3AaStVcyHvKzDJTvNtdtoQsNnfvg04k"
      },
      "scrimCreate": {
        "handler": "scrim/handler.create",
        "events": [
          {
            "http": {
              "path": "scrim",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-scrimCreate",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ScrimCreateLambdaVersionXtDCwa5FOvT0tKJBQFpJih9vWW5gVSDhTvcF0GH7A"
      },
      "scrimGetByMessageId": {
        "handler": "dist/scrim/handler.getByMessageId",
        "events": [
          {
            "http": {
              "path": "scrim",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.querystring.messageId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-scrimGetByMessageId",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ScrimGetByMessageIdLambdaVersionkEsTHlShB9Kv7mY8V9SMWYjRcugqlgMI9JNK0DSuU"
      },
      "scrimGetByTeams": {
        "handler": "dist/scrim/handler.getByTeams",
        "events": [
          {
            "http": {
              "path": "scrim",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.querystring.team1": true,
                  "method.request.querystring.team2": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-scrimGetByTeams",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ScrimGetByTeamsLambdaVersionD6S1J0qz5m96jTBxZuZQCqsAK2Ja90hG0teKELwVSw"
      },
      "scrimDelete": {
        "handler": "dist/scrim/handler.deleteScrim",
        "events": [
          {
            "http": {
              "path": "scrim/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-scrimDelete",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ScrimDeleteLambdaVersionXMSCNHYQMxefBhI2qOXDsuFOSBiO0mSPqDvsUYps"
      },
      "teamRegister": {
        "handler": "dist/team/handler.register",
        "events": [
          {
            "http": {
              "path": "team",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-teamRegister",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "TeamRegisterLambdaVersion6yY8rG029pRkfh7l49bgXvmTp3J4BH84VECwcG8nGc"
      },
      "teamGetOne": {
        "handler": "dist/team/handler.getOne",
        "events": [
          {
            "http": {
              "path": "team/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-teamGetOne",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "TeamGetOneLambdaVersionpRSlcgYX4GWjccCkJ3zM64sBbo97i5vOUCR3Fprk9i0"
      },
      "teamUpdate": {
        "handler": "dist/team/handler.update",
        "events": [
          {
            "http": {
              "path": "team/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-teamUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "TeamUpdateLambdaVersionOBuovreGTvfY12p1wbfGsukdD3Tgz6P320SMU8bEU"
      },
      "teamGetStats": {
        "handler": "dist/team/handler.getStats",
        "events": [
          {
            "http": {
              "path": "team/{id}/stats",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-teamGetStats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "TeamGetStatsLambdaVersion2bOrZr0CYgN7GhJkZdQlnfjmI60uDrV52rjNd49zM"
      },
      "userRegister": {
        "handler": "dist/user/handler.register",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userRegister",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserRegisterLambdaVersionA5NARsVybrWSq4ieySNbFaFIsRqiEoX8eTRjIPd4Qtc"
      },
      "userGetOne": {
        "handler": "dist/user/handler.getOne",
        "events": [
          {
            "http": {
              "path": "user/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userGetOne",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserGetOneLambdaVersion0tyDZhfUVn2gZX9UGcYBoUOOG0d7PpOyybJuQDUqQ"
      },
      "userUpdate": {
        "handler": "dist/user/handler.update",
        "events": [
          {
            "http": {
              "path": "user/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserUpdateLambdaVersiongYLhmKNI3eudtQe4j0c6HI0PdMkJWa9nfFYNto6BcGY"
      },
      "userGetStatsWithMatches": {
        "handler": "dist/user/handler.getStatsWithMatches",
        "events": [
          {
            "http": {
              "path": "user/{id}/statswithmatches",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userGetStatsWithMatches",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserGetStatsWithMatchesLambdaVersionJDjjVHudKlIS0v1obWxPlRNg89TqSaItiSDKNuIZI"
      },
      "userGetStats": {
        "handler": "dist/user/handler.getStats",
        "events": [
          {
            "http": {
              "path": "user/{id}/stats",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userGetStats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserGetStatsLambdaVersionAKvHjunJH0Ea94XYXXhkhDgPQhtA12dD6bI7CPde70"
      },
      "userGetAll": {
        "handler": "dist/user/handler.getAll",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userGetAll",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserGetAllLambdaVersionfJrUhslgdvprEhxRgElpp2BM8NsjBLwKpVQwwPYKV0"
      },
      "userGetLeaderboard": {
        "handler": "dist/user/handler.getLeaderboard",
        "events": [
          {
            "http": {
              "path": "user/leaderboard",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "fraggerz-api-2-alpha-userGetLeaderboard",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserGetLeaderboardLambdaVersionWNUTS9cyOjDzkk15qXSQ4YrnZAKe0rPXQZJCVSoWTY"
      }
    },
    "resources": {
      "Resources": {
        "FraggerzDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "fraggerz-api-2-alpha"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\lukem\\source\\omnificent\\src\\FraggerZ\\api\\.serverless\\fraggerz-api-2.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/fraggerz-api-2/alpha/1615098110744-2021-03-07T06:21:50.744Z",
    "artifact": "fraggerz-api-2.zip"
  }
}